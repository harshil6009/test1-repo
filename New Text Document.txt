import os
import subprocess

# Step 1: Create Python executable script to connect to GitHub repo
print("Connecting to GitHub repo...")

# Ask user to provide a GitHub token to access the repo
github_token = input("Please enter your GitHub token: ")

# Clone the repo using the GitHub token
subprocess.run(["git", "clone", f"https://{github_token}@github.com/org/repo.git"])

# Change directory to the cloned repo
os.chdir("repo")

# Step 2: Create a new branch in the repo
print("Creating a new branch...")

# Ask user to provide a name for the branch, which must start with "PUB-"
branch_name = input("Please enter a name for the new branch (must start with 'PUB-'): ")

# Check if branch name starts with "PUB-"
if not branch_name.startswith("PUB-"):
    print("Error: Branch name must start with 'PUB-'")
    exit()

# Create a new branch with the provided name
subprocess.run(["git", "checkout", "-b", branch_name])

# Step 3: Ask user for the workspaceID
print("Creating workspaceID file...")

# Ask user for the workspaceID
workspaceID = input("Please enter the workspaceID: ")

# Step 4: Create the destination.acl file
print("Creating destination.acl file...")

# Set the path for the destination.acl file
dest_acl_path = f"roles/proxy/files/squid/config/{workspaceID}-destination.acl"

# Check if the destination.acl file already exists
if os.path.exists(dest_acl_path):
    print("Warning: destination.acl file already exists for this workspaceID")
    
# Open the destination.acl file and add the branch name and destination addresses
with open(dest_acl_path, "a") as dest_acl_file:
    dest_addrs = input("Please enter destination addresses (separated by ','): ")
    dest_acl_file.write(f"# {branch_name}\n{dest_addrs}\n")

# Step 5: Create the source.acl file
print("Creating source.acl file...")

# Set the path for the source.acl file
source_acl_path = f"roles/proxy/files/squid/config/{workspaceID}-source.acl"

# Ask user to provide CIDR range(s)
source_cidrs = input("Please enter CIDR range(s) (separated by ','): ")

# Open the source.acl file and add the CIDR range(s)
with open(source_acl_path, "w") as source_acl_file:
    source_acl_file.write(source_cidrs)

# Step 6: Create the sequence number file
print("Creating sequence number file...")

# Ask user for the sequence number
sequence_number = input("Please enter the sequence number: ")

# Set the path for the sequence number file
sequence_path = f"roles/proxy/files/squid/conf.d/{sequence_number}-{workspaceID}.conf"

# Open the sequence number file and write the configuration settings
with open(sequence_path, "w") as sequence_file:
    sequence_file.write(f"acl workspaceID-dst dstdomain \"/etc/squid/config/{workspaceID}-destination.acl\"\n")
    sequence_file.write(f"acl workspaceID-src src \"/etc/squid/config/{workspaceID}-source.acl\"\n")
    sequence_file.write("http_access allow workspaceID-src workspaceID-dst\n")

# Step 7: Prompt user to run local harness test and create a PR
print("Please run local harness tests and create a pull request
